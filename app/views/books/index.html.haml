.container
  .row
    = simple_form_for(:book, url: import_books_url, method: :post) do |f|
      = f.input :file, as: :file
      = f.submit 'Import from file ...'
    = link_to 'Export', export_books_path, method: :post
    %hr
  .row
    = search_form_for(@q) do |f|
      = f.input :meta_rating_eq, collection: [['Super Bad', 0], ['Bad', 1], ['Average', 2], ['Good', 3], ['Super Good', 4]], label: 'Rating', required: false
      = f.input :pages_lteq, collection: [['Short (<=150)', 150], ['Medium (<= 250)', 250]], label: 'Length', required: false
      = f.input :library_books_library_id_eq, collection: Library.all, value_method: :id,  label: 'Library', required: false
      = f.input :library_books_available_eq, collection: [['YES', true], ['NO', false]], label: 'Available', required: false
      = f.input :library_count_eq, collection: [['YES', 1], ['NO', -1]], label: 'Solo', include_blank: true, required: false, selected: params[:q][:library_count_eq]
      = f.submit 'Search'
      = link_to 'Reset', books_path
    %hr
  .row
    .col-xs-12
      %table.table.table-striped
        %tr
          %th Call No
          %th Title
          %th Pages
          %th Height
          %th Solo
          %th Available
          %th
        - @books.each do |b|
          %tr{ class: (b.available_count.zero? ? 'danger' : '') }
            %td= b.call_no
            %td= b.title
            %td= b.pages
            %td= b.height
            %td= b.library_count == 1 ? 'YES' : 'NO'
            %td= ((params[:q].fetch(:library_books_library_id_eq, nil).present? ? b.library_books.where(library_id: params[:q][:library_books_library_id_eq]).first.available : b.available_count > 0) ? 'YES' : 'NO')
            %td
              = link_to 'View', b

      .pagination.pull-right
        = will_paginate @books
