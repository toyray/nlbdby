.container-fluid
  .row
    = simple_form_for(:book, url: import_books_url, method: :post) do |f|
      = f.input :file, as: :file
      = f.submit 'Import from file ...'
    = link_to 'Export', export_books_url, method: :post
    %hr
  .row
    = search_form_for(@q) do |f|
      = f.input :meta_rating_eq, collection: [['Super Bad', 1], ['Bad', 2], ['Average', 3], ['Good', 4], ['Super Good', 5]], label: 'Rating', required: false
      = f.input :pages_lteq, collection: [['Less than 150 pages', 150], ['Less than 200 pages', 200], ['Less than 250 pages', 250]], label: 'Length', required: false
      = f.input :library_books_library_id_eq, collection: Library.all.order(:name), value_method: :id,  label: 'Library', required: false
      = f.input :library_books_available_eq, collection: [['YES', true], ['NO', false]], label: 'Available', required: false
      = f.input :library_count_eq, collection: [['YES', 1], ['NO', -1]], label: 'Solo', include_blank: true, required: false, selected: params[:q][:library_count_eq]
      = f.input :meta_status_eq, collection: [['New', 'new'], ['Borrowed', 'borrowed']], label: 'Status', include_blank: true, required: false
      = f.submit 'Search'
      = link_to 'Reset', books_url
    %hr
  .row
    .col-xs-12
      %table.table.table-striped
        %tr
          %th= sort_link(@q, :call_no)
          %th= sort_link(@q, :title)
          %th Rating
          %th{width: 80}= sort_link(@q, :pages)
          %th{width: 80}= sort_link(@q, :height)
          %th{width: 80} Solo
          %th Available
          %th{width: 120} Update Status
          %th Last Updated
          %th{width: 100} Actions
        - @books.each do |b|
          %tr
            %td= b.call_no
            %td= b.title
            %td= responsive_rater_tag(value: b.meta.rating, min: 0, max: 5, id: b.id)
            %td= b.pages
            %td= b.height
            %td= b.library_count == 1 ? 'YES' : 'NO'
            %td= ((params[:q].fetch(:library_books_library_id_eq, nil).present? ? b.library_books.where(library_id: params[:q][:library_books_library_id_eq]).first.available : b.available_count > 0) ? 'YES' : 'NO')
            %td= b.human_status_name
            %td{ class: (1.day.ago > b.last_updated_at ? 'danger' : '') }= time_ago_in_words(b.last_updated_at) + ' ago'
            %td
              = link_to book_url(b), rel: 'tooltip', title: 'View Book Details' do
                = icon('eye', '', class: 'fa-lg')
              = link_to queue_update_book_url(b), method: :post, rel: 'tooltip', title: 'Queue For Update' do
                = icon('refresh', '', class: 'fa-lg')
              - if b.meta.can_browse?
                = link_to browse_book_url(b), method: :post, rel: 'tooltip', title: 'Mark Browsed' do
                  = icon('book', '', class: 'fa-lg')
              - if b.meta.can_borrow?
                = link_to borrow_book_url(b), method: :post, rel: 'tooltip', title: 'Mark Borrowed' do
                  = icon('check', '', class: 'fa-lg')   

      .pagination.pull-right
        = will_paginate @books
